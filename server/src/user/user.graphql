enum Role {
  ADMIN
  USER
}

type User {
  id: String!
  name: String!
  email: String!
  password: String!
  roles: [Role]!
  refresh_token: String
}

type UserWithoutSensitiveData {
  id: String!
  name: String!
  email: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  roles: [Role]
  refresh_token: String
}

input UpdateUserInput {
  id: String
  name: String
  email: String
  password: String
  roles: [Role]
  refresh_token: String
}

input FindOneUserInput {
  id: String
  email: String
}

type Query {
  users(limit: Int): [UserWithoutSensitiveData]!
  user(findOneUserInput: FindOneUserInput): UserWithoutSensitiveData
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User
}
